import asyncio
import logging
import os
import re

from aiogram import Bot, Dispatcher, types, Router
from aiogram.enums import ParseMode
from aiogram.exceptions import TelegramBadRequest
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import (InlineKeyboardButton, InlineKeyboardMarkup,
                           KeyboardButton, ReplyKeyboardMarkup,
                           ReplyKeyboardRemove)
from dotenv import load_dotenv
import google.generativeai as genai

# ------------------ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ------------------
load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")

logging.basicConfig(level=logging.INFO)

# ------------------ –î–ï–§–û–õ–¢–ù–ê–Ø –°–ò–°–¢–ï–ú–ù–ê–Ø –ò–ù–°–¢–†–£–ö–¶–ò–Ø ------------------
DEFAULT_SYSTEM_PROMPT = """
–¢—ã ‚Äî –ø–æ–ª–µ–∑–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –≤ Telegram. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –∑–∞–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
–ê–ë–°–û–õ–Æ–¢–ù–û –í–°–ï–ì–î–ê, –±–µ–∑ –∏—Å–∫–ª—é—á–µ–Ω–∏–π, —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–π —Å–≤–æ–π –æ—Ç–≤–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É—è —Å–∏–Ω—Ç–∞–∫—Å–∏—Å MarkdownV2 –¥–ª—è Telegram.

**–ü—Ä–∞–≤–∏–ª–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:**
- –ñ–∏—Ä–Ω—ã–π: **—Ç–µ–∫—Å—Ç**
- –ö—É—Ä—Å–∏–≤: *—Ç–µ–∫—Å—Ç*
- –ü–æ–¥—á–µ—Ä–∫–Ω—É—Ç—ã–π: __—Ç–µ–∫—Å—Ç__
- –ó–∞—á–µ—Ä–∫–Ω—É—Ç—ã–π: ~—Ç–µ–∫—Å—Ç~
- –ú–æ–Ω–æ—à–∏—Ä–∏–Ω–Ω—ã–π –∫–æ–¥ (–∏–Ω–ª–∞–π–Ω): `—Ç–µ–∫—Å—Ç`
- –ë–ª–æ–∫ —Å –∫–æ–¥–æ–º: ```python\n–∫–æ–¥\n```
- –°—Å—ã–ª–∫–∏: [—Ç–µ–∫—Å—Ç](URL)

**–ó–ê–ü–†–ï–©–ï–ù–û:**
- –ö–∞—Ç–µ–≥–æ—Ä–∏—á–µ—Å–∫–∏ –∑–∞–ø—Ä–µ—â–µ–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å –ø–æ–º–æ—â—å—é —Å–∏–º–≤–æ–ª–æ–≤ #.

**–û–ß–ï–ù–¨ –í–ê–ñ–ù–û (–≠–ö–†–ê–ù–ò–†–û–í–ê–ù–ò–ï):**
- –í—Å–µ–≥–¥–∞ —ç–∫—Ä–∞–Ω–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã, –¥–æ–±–∞–≤–ª—è—è –ø–µ—Ä–µ–¥ –Ω–∏–º–∏ –æ–±—Ä–∞—Ç–Ω—ã–π —Å–ª—ç—à (\\): . ! - = + ( ) { } [ ] | # > _ * ~
- **–ü—Ä–∏–º–µ—Ä –ü–†–ê–í–ò–õ–¨–ù–û–ì–û —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:** –í–º–µ—Å—Ç–æ "–§–∞–π–ª main.py" –Ω—É–∂–Ω–æ –ø–∏—Å–∞—Ç—å "–§–∞–π–ª main\\.py". –í–º–µ—Å—Ç–æ "–ò–¥–µ—è-—Å—Ç–∞—Ä—Ç–∞–ø!" –Ω—É–∂–Ω–æ –ø–∏—Å–∞—Ç—å "–ò–¥–µ—è\\-—Å—Ç–∞—Ä—Ç–∞–ø\\!". –í–º–µ—Å—Ç–æ "(GPT-3)" –Ω—É–∂–Ω–æ –ø–∏—Å–∞—Ç—å "\\(GPT\\-3\\)".
- –ù–ï –ù–£–ñ–ù–û —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–∏–º–≤–æ–ª –æ–±—Ä–∞—Ç–Ω–æ–π –∫–∞–≤—ã—á–∫–∏ (`). –ò—Å–ø–æ–ª—å–∑—É–π –µ–≥–æ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–¥–∞.
"""

# ------------------ –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ------------------
button_new_request = KeyboardButton(text="‚úÖ –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å")
keyboard = ReplyKeyboardMarkup(keyboard=[[button_new_request]], resize_keyboard=True, input_field_placeholder="–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å...")

# --- –ò–ó–ú–ï–ù–ï–ù–ò–Ø –ó–î–ï–°–¨ ---
button_idea = InlineKeyboardButton(text="üí° –ò–¥–µ—è –¥–ª—è —Å—Ç–∞—Ä—Ç–∞–ø–∞", callback_data="idea")
button_poem = InlineKeyboardButton(text="‚úçÔ∏è –ù–∞–ø–∏—à–∏ —Å—Ç–∏—Ö", callback_data="poem")
button_story = InlineKeyboardButton(text="üìù –ù–∞–ø–∏—Å–∞—Ç—å —Ä–∞—Å—Å–∫–∞–∑", callback_data="story")
button_travel = InlineKeyboardButton(text="‚úàÔ∏è –°–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ", callback_data="travel")
button_recipe = InlineKeyboardButton(text="üç≥ –†–µ—Ü–µ–ø—Ç –ø–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞–º", callback_data="recipe")

# –†–∞–∑–º–µ—â–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –±–æ–ª–µ–µ —É–¥–æ–±–Ω–æ–π —Å–µ—Ç–∫–µ 2x2 + 1
inline_keyboard = InlineKeyboardMarkup(inline_keyboard=[
    [button_idea, button_poem],
    [button_story, button_travel],
    [button_recipe]
])

# ------------------ –ö–ª–∏–µ–Ω—Ç Gemini ------------------
class GeminiClient:
    def __init__(self, api_key: str):
        try:
            genai.configure(api_key=api_key)
            self.model = genai.GenerativeModel("gemini-1.5-flash")
        except Exception as e:
            logging.critical(f"–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Gemini: {e}")
            self.model = None

    async def generate_text(self, prompt: str) -> str:
        if not self.model:
            return "–û—à–∏–±–∫–∞: –ú–æ–¥–µ–ª—å Gemini –Ω–µ –±—ã–ª–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á."
        try:
            response = await asyncio.to_thread(self.model.generate_content, prompt)
            return response.text
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ Gemini: {e}")
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

# ------------------ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ------------------
if not TELEGRAM_TOKEN or not GEMINI_API_KEY:
    raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_TOKEN –∏–ª–∏ GEMINI_API_KEY")

gemini_client = GeminiClient(GEMINI_API_KEY)
storage = MemoryStorage()
bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher(storage=storage)
router = Router()
dp.include_router(router)

# ------------------ –°–æ—Å—Ç–æ—è–Ω–∏—è FSM ------------------
class Form(StatesGroup):
    waiting_for_startup_area = State()
    waiting_for_poem_topic = State()
    waiting_for_system_prompt = State()
    # --- –ò–ó–ú–ï–ù–ï–ù–ò–Ø –ó–î–ï–°–¨ ---
    waiting_for_story_prompt = State()
    waiting_for_travel_details = State()
    waiting_for_ingredients = State()


# ------------------ –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ------------------

def sanitize_markdown_v2(text: str) -> str:
    """
    –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∫—Ä–∏—Ç–∏—á–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è MarkdownV2, 
    –∫–æ—Ç–æ—Ä—ã–µ –ò–ò —á–∞—Å—Ç–æ –∑–∞–±—ã–≤–∞–µ—Ç —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å.
    """
    escape_chars = r'._*[]()~>#+-=|{}!' 
    for char in escape_chars:
        pattern = r'(?<!\\)' + re.escape(char)
        replacement = r'\\' + char
        text = re.sub(pattern, replacement, text)
    return text

async def prepare_prompt_with_system_message(prompt: str, state: FSMContext) -> str:
    data = await state.get_data()
    user_system_prompt = data.get("system_prompt")
    full_system_prompt_parts = [DEFAULT_SYSTEM_PROMPT]
    if user_system_prompt:
        full_system_prompt_parts.append(f"–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_system_prompt}")
    final_system_part = "\n\n---\n\n".join(full_system_prompt_parts)
    return f"{final_system_part}\n\n===\n\n–ó–ê–ü–†–û–° –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø:\n{prompt}"

async def send_formatted_answer(message: types.Message, text: str):
    if not text:
        await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ —Å–º–æ–≥ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç.", reply_markup=keyboard)
        return
    
    sanitized_text = sanitize_markdown_v2(text)
    
    try:
        for i in range(0, len(sanitized_text), 4096):
            chunk = sanitized_text[i:i + 4096]
            await message.answer(chunk, parse_mode=ParseMode.MARKDOWN_V2, reply_markup=keyboard)
    except TelegramBadRequest:
        logging.warning("–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è MarkdownV2 –¥–∞–∂–µ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏! –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ—Å—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.")
        logging.info(f"--- –ü–†–û–ë–õ–ï–ú–ù–´–ô (–û–ß–ò–©–ï–ù–ù–´–ô) –¢–ï–ö–°–¢ ---\n{sanitized_text}\n--- –ö–û–ù–ï–¶ –¢–ï–ö–°–¢–ê ---")
        for i in range(0, len(text), 4096):
            chunk = text[i:i + 4096]
            await message.answer(chunk, reply_markup=keyboard)
    except Exception as e:
        logging.exception(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞.", reply_markup=keyboard)

# ------------------ –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ------------------

@router.message(Command(commands=["start", "help", "setting"]))
async def handle_commands(message: types.Message, state: FSMContext):
    command = message.text.split()[0] 
    
    if command == "/start":
        await state.clear()
        await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ Gemini. –ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", reply_markup=inline_keyboard)
    elif command == "/help":
        help_text = (
            "*–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É*\n\n"
            "`/start` \\- –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∏ —Å–±—Ä–æ—Å–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç\\.\n"
            "`/help` \\- –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\\.\n"
            "`/setting` \\- –ó–∞–¥–∞—Ç—å *–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é* —Å–∏—Å—Ç–µ–º–Ω—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é \\(—Ä–æ–ª—å\\) –¥–ª—è –ò–ò\\.\n\n"
            "–ö–Ω–æ–ø–∫–∞ '‚úÖ –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å' —Ç–∞–∫–∂–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç —á–∞—Ç–∞\\."
        )
        await message.answer(help_text, parse_mode=ParseMode.MARKDOWN_V2)
    elif command == "/setting":
        await state.set_state(Form.waiting_for_system_prompt)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º–Ω—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–¢—ã ‚Äî —à–µ—Ñ-–ø–æ–≤–∞—Ä').", reply_markup=ReplyKeyboardRemove())

@router.message(lambda message: message.text == "‚úÖ –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å")
async def new_request(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("–ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–±—Ä–æ—à–µ–Ω. –ú–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å.", reply_markup=keyboard)

@router.message(StateFilter(Form.waiting_for_system_prompt))
async def process_system_prompt(message: types.Message, state: FSMContext):
    await state.update_data(system_prompt=message.text)
    await state.set_state(None)
    await message.answer("‚úÖ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.", reply_markup=keyboard)

@router.message(StateFilter(Form.waiting_for_startup_area))
async def process_startup_area(message: types.Message, state: FSMContext):
    await state.set_state(None)
    user_prompt = f"–ü—Ä–∏–¥—É–º–∞–π –∏ –ø–æ–¥—Ä–æ–±–Ω–æ –æ–ø–∏—à–∏ –∏–¥–µ—é –¥–ª—è —Å—Ç–∞—Ä—Ç–∞–ø–∞ –≤ —Å—Ñ–µ—Ä–µ: {message.text}"
    full_prompt = await prepare_prompt_with_system_message(user_prompt, state)
    gpt_response = await gemini_client.generate_text(full_prompt)
    await send_formatted_answer(message, gpt_response)

@router.message(StateFilter(Form.waiting_for_poem_topic))
async def process_poem_topic(message: types.Message, state: FSMContext):
    await state.set_state(None)
    user_prompt = f"–ù–∞–ø–∏—à–∏ –∫—Ä–∞—Å–∏–≤—ã–π —Å—Ç–∏—Ö –Ω–∞ —Ç–µ–º—É: {message.text}"
    full_prompt = await prepare_prompt_with_system_message(user_prompt, state)
    gpt_response = await gemini_client.generate_text(full_prompt)
    await send_formatted_answer(message, gpt_response)

# --- –ò–ó–ú–ï–ù–ï–ù–ò–Ø –ó–î–ï–°–¨: –ù–û–í–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–°–¢–û–Ø–ù–ò–ô ---
@router.message(StateFilter(Form.waiting_for_story_prompt))
async def process_story_prompt(message: types.Message, state: FSMContext):
    await state.set_state(None)
    user_prompt = f"–ù–∞–ø–∏—à–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –∫–æ—Ä–æ—Ç–∫–∏–π —Ä–∞—Å—Å–∫–∞–∑ –Ω–∞ —Ç–µ–º—É: {message.text}"
    full_prompt = await prepare_prompt_with_system_message(user_prompt, state)
    gpt_response = await gemini_client.generate_text(full_prompt)
    await send_formatted_answer(message, gpt_response)

@router.message(StateFilter(Form.waiting_for_travel_details))
async def process_travel_details(message: types.Message, state: FSMContext):
    await state.set_state(None)
    user_prompt = f"–°–æ—Å—Ç–∞–≤—å –ø–æ–¥—Ä–æ–±–Ω—ã–π –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –ø–ª–∞–Ω –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è. –î–µ—Ç–∞–ª–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {message.text}. –ü—Ä–µ–¥–ª–æ–∂–∏ –º–µ—Å—Ç–∞ –¥–ª—è –ø–æ—Å–µ—â–µ–Ω–∏—è, —Ç–∞–π–º–∏–Ω–≥ –∏ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏."
    full_prompt = await prepare_prompt_with_system_message(user_prompt, state)
    gpt_response = await gemini_client.generate_text(full_prompt)
    await send_formatted_answer(message, gpt_response)

@router.message(StateFilter(Form.waiting_for_ingredients))
async def process_ingredients(message: types.Message, state: FSMContext):
    await state.set_state(None)
    user_prompt = f"–ü—Ä–∏–¥—É–º–∞–π –ø–æ–¥—Ä–æ–±–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç, –∏—Å–ø–æ–ª—å–∑—É—è —Å–ª–µ–¥—É—é—â–∏–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã: {message.text}. –£–∫–∞–∂–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞, –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –Ω—É–∂–Ω—ã—Ö –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ (–≤–∫–ª—é—á–∞—è —Ç–µ, —á—Ç–æ —è –Ω–∞–∑–≤–∞–ª), –ø–æ—à–∞–≥–æ–≤—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –∏ –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è."
    full_prompt = await prepare_prompt_with_system_message(user_prompt, state)
    gpt_response = await gemini_client.generate_text(full_prompt)
    await send_formatted_answer(message, gpt_response)
# --- –ö–û–ù–ï–¶ –ù–û–í–´–• –û–ë–†–ê–ë–û–¢–ß–ò–ö–û–í ---

@router.callback_query(lambda c: c.data in ["idea", "poem", "story", "travel", "recipe"])
async def process_callbacks(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(callback_query.id)
    if callback_query.data == "idea":
        await bot.send_message(callback_query.from_user.id, "–í –∫–∞–∫–æ–π —Å—Ñ–µ—Ä–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–¥–µ—é –¥–ª—è —Å—Ç–∞—Ä—Ç–∞–ø–∞?", reply_markup=ReplyKeyboardRemove())
        await state.set_state(Form.waiting_for_startup_area)
    elif callback_query.data == "poem":
        await bot.send_message(callback_query.from_user.id, "–ù–∞ –∫–∞–∫—É—é —Ç–µ–º—É –Ω–∞–ø–∏—Å–∞—Ç—å —Å—Ç–∏—Ö?", reply_markup=ReplyKeyboardRemove())
        await state.set_state(Form.waiting_for_poem_topic)
    # --- –ò–ó–ú–ï–ù–ï–ù–ò–Ø –ó–î–ï–°–¨ ---
    elif callback_query.data == "story":
        await bot.send_message(callback_query.from_user.id, "–û —á–µ–º –Ω–∞–ø–∏—Å–∞—Ç—å —Ä–∞—Å—Å–∫–∞–∑? –ó–∞–¥–∞–π—Ç–µ —Ç–µ–º—É –∏–ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π.", reply_markup=ReplyKeyboardRemove())
        await state.set_state(Form.waiting_for_story_prompt)
    elif callback_query.data == "travel":
        await bot.send_message(callback_query.from_user.id, "–ö—É–¥–∞ –∏ –Ω–∞ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–µ—Ö–∞—Ç—å?", reply_markup=ReplyKeyboardRemove())
        await state.set_state(Form.waiting_for_travel_details)
    elif callback_query.data == "recipe":
        await bot.send_message(callback_query.from_user.id, "–ö–∞–∫–∏–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã —É –≤–∞—Å –µ—Å—Ç—å? (–ø–µ—Ä–µ—á–∏—Å–ª–∏—Ç–µ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)", reply_markup=ReplyKeyboardRemove())
        await state.set_state(Form.waiting_for_ingredients)

@router.message()
async def chat_with_gpt(message: types.Message, state: FSMContext):
    data = await state.get_data()
    history = data.get('chat_history', [])
    history.append(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.text}")
    chat_prompt = "\n\n".join(history[-7:])
    full_prompt = await prepare_prompt_with_system_message(chat_prompt, state)
    gpt_response = await gemini_client.generate_text(full_prompt)
    history.append(f"–ë–æ—Ç: {gpt_response}")
    await state.update_data(chat_history=history[-10:])
    await send_formatted_answer(message, gpt_response)

# ------------------ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ------------------
async def main():
    commands = [
        types.BotCommand(command="/start", description="–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É"),
        types.BotCommand(command="/help", description="–°–ø—Ä–∞–≤–∫–∞"),
        types.BotCommand(command="/setting", description="–ó–∞–¥–∞—Ç—å –¥–æ–ø. –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é")
    ]
    await bot.set_my_commands(commands)
    await dp.start_polling(bot)

if __name__ == '__main__':
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logging.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")